diff --git a/control_stack/include/cs/main/state_machine.h b/control_stack/include/cs/main/state_machine.h
index d32b4d9..78c996e 100644
--- a/control_stack/include/cs/main/state_machine.h
+++ b/control_stack/include/cs/main/state_machine.h
@@ -41,6 +41,7 @@
 #include "cs/motion_planning/pid.h"
 #include "cs/motion_planning/turtlebot_command_scaler.h"
 #include "cs/obstacle_avoidance/obstacle_detector.h"
+#include "cs/obstacle_avoidance/ped_detector.h"
 #include "cs/path_finding/astar.h"
 #include "cs/path_finding/global_path_finder.h"
 #include "cs/state_estimation/pf_state_estimator.h"
@@ -148,6 +149,7 @@ class StateMachine {
   cs::main::DebugPubWrapper* dpw_;
   util::vector_map::VectorMap map_;
   std::unique_ptr<state_estimation::StateEstimator> state_estimator_;
+  std::unique_ptr<ped_estimation::PedDetector> ped_detector_;
   obstacle_avoidance::ObstacleDetector obstacle_detector_;
   motion_planning::PIDController motion_planner_;
   std::unique_ptr<motion_planning::CommandScaler> command_scaler_;
@@ -162,6 +164,7 @@ class StateMachine {
       ROS_INFO("Using sim ground truth for state estimation");
       return new cs::state_estimation::SimStateEstimator(n);
     }
+
     ROS_INFO("Using PF for state estimation initialized at (%f, %f), %f",
              params::CONFIG_start_pose.x(),
              params::CONFIG_start_pose.y(),
@@ -169,6 +172,11 @@ class StateMachine {
     return new cs::state_estimation::PFStateEstimator(
         map_, util::Pose(params::CONFIG_start_pose));
   }
+
+    
+  cs::ped_detector::PedDetector* MakePedDetector() {
+      return new cs::ped_detector::PedDetector();
+    }
   cs::motion_planning::CommandScaler* MakeCommandScaler() {
     if (params::CONFIG_command_scaler == "turtlebot") {
       return new cs::motion_planning::TurtlebotCommandScaler();
@@ -273,6 +281,7 @@ class StateMachine {
       : dpw_(dpw),
         map_(params::CONFIG_map),
         state_estimator_(MakeStateEstimator(n)),
+        ped_detector_(MakePedDetector()),
         obstacle_detector_(),
         motion_planner_(map_, *state_estimator_),
         command_scaler_(MakeCommandScaler()),
@@ -308,6 +317,11 @@ class StateMachine {
     state_estimator_->UpdateLaser(laser_, laser_update_time_);
   }
 
+  void UpdatePeds(const sensor_msgs::LaserScan& msg) {
+    ped_update_time_ = msg.header.stamp;
+    ped_detector_->UpdatePeds(laser_, ped_update_time_);
+  }
+
   void UpdateOdom(const nav_msgs::Odometry& msg) {
     odom_ = util::Twist(msg.twist.twist);
     odom_update_time_ = msg.header.stamp;
diff --git a/control_stack/include/cs/obstacle_avoidance/ped_detector.h b/control_stack/include/cs/obstacle_avoidance/ped_detector.h
new file mode 100644
index 0000000..759b9e0
--- /dev/null
+++ b/control_stack/include/cs/obstacle_avoidance/ped_detector.h
@@ -0,0 +1,51 @@
+#pragma once
+// ========================================================================
+#include <ros/ros.h>
+#include <array>
+#include <random>
+
+#include "cs/util/laser_scan.h"
+#include "cs/util/map.h"
+#include "cs/util/pose.h"
+#include "cs/util/twist.h"
+#include "cs/util/datastructures/circular_buffer.h"
+
+namespace cs {
+namespace ped_detection {
+
+class PedDetector {
+ private:
+  float obstacle_dummy_ = 31;
+  static constexpr size_t kTimeBufferSize = 5;
+  cs::datastructures::CircularBuffer<ros::Time, kTimeBufferSize> laser_times_;
+
+  float GetTimeDelta(
+      const cs::datastructures::CircularBuffer<ros::Time, kTimeBufferSize>& b)
+      const {
+    if (b.size() <= 1) {
+      return kEpsilon;
+    }
+    const double total_time_delta = (b.back() - b.front()).toSec();
+    const double iterations = static_cast<double>(b.size() - 1);
+    return static_cast<float>(total_time_delta / iterations);
+  }
+
+ public:
+  PedDetector() = delete;
+  PedDetector() {}
+  ~PedDetector() = default;
+
+  void UpdatePeds(const util::LaserScan& laser, const ros::Time& time) {
+    NP_CHECK(laser.ros_laser_scan_.header.stamp == time);
+    laser_times_.push_back(time);
+  }
+
+  float GetPeds() const {
+    return obstacle_dummy;
+  }
+
+  float GetTimeDelta() const { return GetTimeDelta(laser_times_); }
+
+}  // namespace ped_detector
+}  // namespace cs
+
diff --git a/control_stack/src/main/nav_node.cpp b/control_stack/src/main/nav_node.cpp
index 086cd67..16f1e11 100644
--- a/control_stack/src/main/nav_node.cpp
+++ b/control_stack/src/main/nav_node.cpp
@@ -4,7 +4,6 @@
 #include "config_reader/config_reader.h"
 #include <string>
 
-
 namespace params {
 CONFIG_STRING(map, "pf.map");
 }
diff --git a/gazebo_ground_truth/CMakeLists.txt b/gazebo_ground_truth/CMakeLists.txt
new file mode 100644
index 0000000..40f632b
--- /dev/null
+++ b/gazebo_ground_truth/CMakeLists.txt
@@ -0,0 +1,211 @@
+cmake_minimum_required(VERSION 3.0.2)	
+project(gazebo_ground_truth)	
+
+## Compile as C++11, supported in ROS Kinetic and newer	
+# add_compile_options(-std=c++11)	
+
+## Find catkin macros and libraries	
+## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)	
+## is used, also find other catkin packages	
+find_package(catkin REQUIRED COMPONENTS	
+  gazebo_msgs	
+  gazebo_ros	
+  geometry_msgs	
+  pedsim_msgs	
+  roscpp	
+  std_msgs	
+)	
+
+## System dependencies are found with CMake's conventions	
+# find_package(Boost REQUIRED COMPONENTS system)	
+
+
+## Uncomment this if the package has a setup.py. This macro ensures	
+## modules and global scripts declared therein get installed	
+## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html	
+# catkin_python_setup()	
+
+################################################	
+## Declare ROS messages, services and actions ##	
+################################################	
+
+## To declare and build messages, services or actions from within this	
+## package, follow these steps:	
+## * Let MSG_DEP_SET be the set of packages whose message types you use in	
+##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).	
+## * In the file package.xml:	
+##   * add a build_depend tag for "message_generation"	
+##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET	
+##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in	
+##     but can be declared for certainty nonetheless:	
+##     * add a exec_depend tag for "message_runtime"	
+## * In this file (CMakeLists.txt):	
+##   * add "message_generation" and every package in MSG_DEP_SET to	
+##     find_package(catkin REQUIRED COMPONENTS ...)	
+##   * add "message_runtime" and every package in MSG_DEP_SET to	
+##     catkin_package(CATKIN_DEPENDS ...)	
+##   * uncomment the add_*_files sections below as needed	
+##     and list every .msg/.srv/.action file to be processed	
+##   * uncomment the generate_messages entry below	
+##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)	
+
+## Generate messages in the 'msg' folder	
+# add_message_files(	
+#   FILES	
+#   Message1.msg	
+#   Message2.msg	
+# )	
+
+## Generate services in the 'srv' folder	
+# add_service_files(	
+#   FILES	
+#   Service1.srv	
+#   Service2.srv	
+# )	
+
+## Generate actions in the 'action' folder	
+# add_action_files(	
+#   FILES	
+#   Action1.action	
+#   Action2.action	
+# )	
+
+## Generate added messages and services with any dependencies listed here	
+# generate_messages(	
+#   DEPENDENCIES	
+#   gazebo_msgs#   geometry_msgs#   pedsim_msgs#   std_msgs	
+# )	
+
+################################################	
+## Declare ROS dynamic reconfigure parameters ##	
+################################################	
+
+## To declare and build dynamic reconfigure parameters within this	
+## package, follow these steps:	
+## * In the file package.xml:	
+##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"	
+## * In this file (CMakeLists.txt):	
+##   * add "dynamic_reconfigure" to	
+##     find_package(catkin REQUIRED COMPONENTS ...)	
+##   * uncomment the "generate_dynamic_reconfigure_options" section below	
+##     and list every .cfg file to be processed	
+
+## Generate dynamic reconfigure parameters in the 'cfg' folder	
+# generate_dynamic_reconfigure_options(	
+#   cfg/DynReconf1.cfg	
+#   cfg/DynReconf2.cfg	
+# )	
+
+###################################	
+## catkin specific configuration ##	
+###################################	
+## The catkin_package macro generates cmake config files for your package	
+## Declare things to be passed to dependent projects	
+## INCLUDE_DIRS: uncomment this if your package contains header files	
+## LIBRARIES: libraries you create in this project that dependent projects also need	
+## CATKIN_DEPENDS: catkin_packages dependent projects also need	
+## DEPENDS: system dependencies of this project that dependent projects also need	
+catkin_package(	
+#  INCLUDE_DIRS include	
+#  LIBRARIES gazebo_ground_truth	
+#  CATKIN_DEPENDS gazebo_msgs gazebo_ros geometry_msgs pedsim_msgs roscpp std_msgs	
+#  DEPENDS system_lib	
+)	
+
+###########	
+## Build ##	
+###########	
+
+## Specify additional locations of header files	
+## Your package locations should be listed before other locations	
+include_directories(	
+# include	
+  ${catkin_INCLUDE_DIRS}	
+)	
+
+## Declare a C++ library	
+# add_library(${PROJECT_NAME}	
+#   src/${PROJECT_NAME}/gazebo_ground_truth.cpp	
+# )	
+
+## Add cmake target dependencies of the library	
+## as an example, code may need to be generated before libraries	
+## either from message generation or dynamic reconfigure	
+# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})	
+
+## Declare a C++ executable	
+## With catkin_make all packages are built within a single CMake context	
+## The recommended prefix ensures that target names across packages don't collide	
+# add_executable(${PROJECT_NAME}_node src/gazebo_ground_truth_node.cpp)	
+add_executable(gt_node src/gt_node.cpp)	
+target_link_libraries(gt_node ${catkin_LIBRARIES})	
+
+## Rename C++ executable without prefix	
+## The above recommended prefix causes long target names, the following renames the	
+## target back to the shorter version for ease of user use	
+## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"	
+# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")	
+
+## Add cmake target dependencies of the executable	
+## same as for the library above	
+# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})	
+
+## Specify libraries to link a library or executable target against	
+# target_link_libraries(${PROJECT_NAME}_node	
+#   ${catkin_LIBRARIES}	
+# )	
+
+#############	
+## Install ##	
+#############	
+
+# all install targets should use catkin DESTINATION variables	
+# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html	
+
+## Mark executable scripts (Python etc.) for installation	
+## in contrast to setup.py, you can choose the destination	
+# catkin_install_python(PROGRAMS	
+#   scripts/my_python_script	
+#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}	
+# )	
+
+## Mark executables for installation	
+## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html	
+# install(TARGETS ${PROJECT_NAME}_node	
+#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}	
+# )	
+
+## Mark libraries for installation	
+## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html	
+# install(TARGETS ${PROJECT_NAME}	
+#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}	
+#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}	
+#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}	
+# )	
+
+## Mark cpp header files for installation	
+# install(DIRECTORY include/${PROJECT_NAME}/	
+#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}	
+#   FILES_MATCHING PATTERN "*.h"	
+#   PATTERN ".svn" EXCLUDE	
+# )	
+
+## Mark other files for installation (e.g. launch and bag files, etc.)	
+# install(FILES	
+#   # myfile1	
+#   # myfile2	
+#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}	
+# )	
+
+#############	
+## Testing ##	
+#############	
+
+## Add gtest based cpp test target and link libraries	
+# catkin_add_gtest(${PROJECT_NAME}-test test/test_gazebo_ground_truth.cpp)	
+# if(TARGET ${PROJECT_NAME}-test)	
+#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})	
+# endif()	
+
+## Add folders to be run by python nosetests	
+# catkin_add_nosetests(test)
\ No newline at end of file
diff --git a/gazebo_ground_truth/src/gt_node.cpp b/gazebo_ground_truth/src/gt_node.cpp
new file mode 100644
index 0000000..3e06f11
--- /dev/null
+++ b/gazebo_ground_truth/src/gt_node.cpp
@@ -0,0 +1,32 @@
+#include "ros/ros.h"	
+#include "gazebo_msgs/ModelStates.h"	
+#include "geometry_msgs/Pose.h"	
+#include "geometry_msgs/Twist.h"	
+#include <iostream>	
+#include <string> 	
+
+
+void modelstate_callback(const gazebo_msgs::ModelStates& msg) {	
+    for (int i = 0; i < msg.name.size(); i++) {	
+        std::string agent_name = msg.name[i];	
+        geometry_msgs::Twist agent_twist = msg.twist[i];	
+        geometry_msgs::Pose agent_pose = msg.pose[i];	
+        try {	
+            int agent_num = std::stoi(agent_name);	
+            // do some other stuff here	
+        } catch (const std::invalid_argument& ia) {	
+            continue;	
+        }	
+        ROS_INFO("Agent name: %s", agent_name.c_str());	
+    }	
+}	
+
+int main(int argc, char **argv) {	
+    ros::init(argc, argv, "gt_node");	
+    ros::NodeHandle n;	
+    ros::Subscriber agent_sub = n.subscribe("gazebo/model_states",	
+                                            1, 	
+                                            modelstate_callback);	
+    ros::spin();	
+    return 0;	
+} 
\ No newline at end of file
